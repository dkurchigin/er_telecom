-- MySQL Script generated by MySQL Workbench
-- Sun Jun 20 18:13:02 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`cgs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`cgs` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(128) NOT NULL,
  `location` VARCHAR(256) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`highway`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`highway` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(128) NOT NULL,
  `cgs_id_cgs` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_highway_cgs1_idx` (`cgs_id_cgs` ASC) VISIBLE,
  CONSTRAINT `fk_highway_cgs1`
    FOREIGN KEY (`cgs_id_cgs`)
    REFERENCES `mydb`.`cgs` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`campus`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`campus` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(128) NOT NULL,
  `highway_id_highway` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_campus_highway1_idx` (`highway_id_highway` ASC) VISIBLE,
  CONSTRAINT `fk_campus_highway1`
    FOREIGN KEY (`highway_id_highway`)
    REFERENCES `mydb`.`highway` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`address` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(128) NOT NULL,
  `flats_number` INT NOT NULL,
  `entrance_number` INT NOT NULL,
  `floor_number` INT NOT NULL,
  `campus_id_campus` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_address_campus_idx` (`campus_id_campus` ASC) VISIBLE,
  CONSTRAINT `fk_address_campus`
    FOREIGN KEY (`campus_id_campus`)
    REFERENCES `mydb`.`campus` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`tables_`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`tables_` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(128) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`history` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `old_value` VARCHAR(256) NULL,
  `new_value` VARCHAR(256) NULL,
  `date_` DATE NOT NULL,
  `time_` TIME NOT NULL,
  `tables__id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_history_tables_1_idx` (`tables__id` ASC) VISIBLE,
  CONSTRAINT `fk_history_tables_1`
    FOREIGN KEY (`tables__id`)
    REFERENCES `mydb`.`tables_` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- procedure add_address
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `add_address` (title varchar(128), flats_number int, entrance_number int, floor_number int, campus_id_campus int)
BEGIN
	INSERT INTO address (title, flats_number, entrance_number, floor_number, campus_id_campus) VALUES (title, flats_number, entrance_number, floor_number, campus_id_campus);
    call add_to_history(1, null, CONCAT_WS(' ', title, flats_number, entrance_number, floor_number, campus_id_campus));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_campus
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `add_campus` (title varchar(256), highway_id_highway int)
BEGIN
	INSERT INTO campus (title, highway_id_highway) VALUES (title, highway_id_highway);
    call add_to_history(2, null, CONCAT_WS(' ', title, highway_id_highway));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_highway
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `add_highway` (title varchar(128), cgs_id_cgs int)
BEGIN
	INSERT INTO highway (title, cgs_id_cgs) VALUES (title, cgs_id_cgs);
    call add_to_history(3, null, CONCAT_WS(' ', title, cgs_id_cgs));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_cgs
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `add_cgs` (title varchar(128), location varchar(256))
BEGIN
	INSERT INTO cgs (title, location) VALUES (title, location);
    call add_to_history(4, null, CONCAT_WS(' ', title, location));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_address
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `update_address` (id_param int, title_param varchar(128), flats_number_param int, entrance_number_param int, floor_number_param int, campus_id_campus_param int)
BEGIN
	set @prev = (SELECT CONCAT_WS(' ', id, title, flats_number, entrance_number, floor_number, campus_id_campus) FROM address WHERE address.id=id_param);
	UPDATE address SET 
		title=title_param, 
		flats_number=flats_number_param, 
		entrance_number=entrance_number_param, 
		floor_number=floor_number_param, 
		campus_id_campus=campus_id_campus_param 
    WHERE address.id=id_param;
    call add_to_history(1, @prev, CONCAT_WS(' ', id_param, title_param, flats_number_param, entrance_number_param, floor_number_param, campus_id_campus_param));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure fill_db
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `fill_db` ()
BEGIN
	INSERT INTO tables_ (id, title) VALUES (1, 'address');
    INSERT INTO tables_ (id, title) VALUES (2, 'campus');  
    INSERT INTO tables_ (id, title) VALUES (3, 'highway'); 
    INSERT INTO tables_ (id, title) VALUES (4, 'cgs'); 
	CALL add_cgs('cgs1', 'some location');
    CALL add_highway('highway1', 1);
    CALL add_campus('campus101', 1);
    CALL add_campus('campus102', 1);
    CALL add_campus('campus202', 1);
    CALL add_address('first_addr', 20, 2, 10, 1);
    CALL add_address('second_addr', 200, 2, 10, 1);
    CALL add_address('third_addr', 200, 2, 10, 3);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_campus
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `update_campus` (id_param int, title_param varchar(128), highway_id_highway_param int)
BEGIN
	set @prev = (SELECT CONCAT_WS(' ', id, title, highway_id_highway) FROM campus WHERE campus.id=id_param);
	UPDATE campus SET 
		title=title_param,
		highway_id_highway=highway_id_highway_param 
    WHERE campus.id=id;
    call add_to_history(2, @prev, CONCAT_WS(' ', id_param, title_param, highway_id_highway_param));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_highway
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `update_highway` (id_param int, title_param varchar(128), cgs_id_cgs_param int)
BEGIN
    set @prev = (SELECT CONCAT_WS(' ', id, title, cgs_id_cgs) FROM highway WHERE highway.id=id_param);
	UPDATE highway SET title=title, cgs_id_cgs=cgs_id_cgs WHERE highway.id=id;
    call add_to_history(3, @prev, CONCAT_WS(' ', id_param, title_param, cgs_id_cgs_param));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure update_cgs
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `update_cgs` (id_param int, title_param varchar(128), location_param varchar(256))
BEGIN
    set @prev = (SELECT CONCAT_WS(' ', id, title, location) FROM cgs WHERE cgs.id=id_param);
	UPDATE cgs SET title=title, location=location WHERE cgs.id=id;
    call add_to_history(4, @prev, CONCAT_WS(' ', id_param, title_param, location_param));
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_address_by_id
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `delete_address_by_id` (id int)
BEGIN
	set @prev = (SELECT CONCAT_WS(' ', id, title, flats_number, entrance_number, floor_number, campus_id_campus) FROM address WHERE address.id=id);
	DELETE FROM address WHERE address.id = id;
    call add_to_history(1, @prev , null);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_campus_by_id
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `delete_campus_by_id` (id int)
BEGIN
    set @prev = (SELECT CONCAT_WS(' ', id, title, highway_id_highway) FROM campus WHERE campus.id=id);
	DELETE FROM campus WHERE campus.id = id;
    call add_to_history(2, @prev , null);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_highway_by_id
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `delete_highway_by_id` (id int)
BEGIN
    set @prev = (SELECT CONCAT_WS(' ', id, title, cgs_id_cgs) FROM highway WHERE highway.id=id);
	DELETE FROM highway WHERE highway.id = id;
    call add_to_history(4, @prev , null);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure delete_cgs_by_id
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `delete_cgs_by_id` (id int)
BEGIN
    set @prev = (SELECT CONCAT_WS(' ', id, title, location) FROM cgs WHERE cgs.id=id);
	DELETE FROM cgs WHERE cgs.id = id;
    call add_to_history(4, @prev , null);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure add_to_history
-- -----------------------------------------------------

DELIMITER $$
USE `mydb`$$
CREATE PROCEDURE `add_to_history` (tables__id int, old_value varchar(256), new_value varchar(256))
BEGIN
	INSERT INTO history (old_value, new_value, date_, time_, tables__id) VALUES (old_value, new_value, (SELECT CURRENT_DATE()), (SELECT CURRENT_TIME()), tables__id);
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
